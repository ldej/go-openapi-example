/*
 * Things API
 *
 * The Things API creates, reads, updates, lists and deletes things!
 *
 * API version: 1.0
 * Contact: info@ldej.nl
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ThingAPIController binds http requests to an api service and writes the service results to the http response
type ThingAPIController struct {
	service ThingAPIServicer
	errorHandler ErrorHandler
}

// ThingAPIOption for how the controller is set up.
type ThingAPIOption func(*ThingAPIController)

// WithThingAPIErrorHandler inject ErrorHandler into controller
func WithThingAPIErrorHandler(h ErrorHandler) ThingAPIOption {
	return func(c *ThingAPIController) {
		c.errorHandler = h
	}
}

// NewThingAPIController creates a default api controller
func NewThingAPIController(s ThingAPIServicer, opts ...ThingAPIOption) Router {
	controller := &ThingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ThingAPIController
func (c *ThingAPIController) Routes() Routes {
	return Routes{
		"CreateThing": Route{
			strings.ToUpper("Post"),
			"/api/v1/things",
			c.CreateThing,
		},
		"DeleteThing": Route{
			strings.ToUpper("Delete"),
			"/api/v1/things/{uuid}",
			c.DeleteThing,
		},
		"GetThing": Route{
			strings.ToUpper("Get"),
			"/api/v1/things/{uuid}",
			c.GetThing,
		},
		"ListThings": Route{
			strings.ToUpper("Get"),
			"/api/v1/things",
			c.ListThings,
		},
		"UpdateThing": Route{
			strings.ToUpper("Put"),
			"/api/v1/things/{uuid}",
			c.UpdateThing,
		},
	}
}

// CreateThing - 
func (c *ThingAPIController) CreateThing(w http.ResponseWriter, r *http.Request) {
	createThingRequestParam := CreateThingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createThingRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateThingRequestRequired(createThingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateThingRequestConstraints(createThingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateThing(r.Context(), createThingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteThing - 
func (c *ThingAPIController) DeleteThing(w http.ResponseWriter, r *http.Request) {
	uuidParam := chi.URLParam(r, "uuid")
	result, err := c.service.DeleteThing(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetThing - 
func (c *ThingAPIController) GetThing(w http.ResponseWriter, r *http.Request) {
	uuidParam := chi.URLParam(r, "uuid")
	result, err := c.service.GetThing(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListThings - 
func (c *ThingAPIController) ListThings(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseNumericParameter[int32](
		query.Get("page"),
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	keywordParam := query.Get("keyword")
	result, err := c.service.ListThings(r.Context(), pageParam, keywordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateThing - 
func (c *ThingAPIController) UpdateThing(w http.ResponseWriter, r *http.Request) {
	uuidParam := chi.URLParam(r, "uuid")
	updateThingRequestParam := UpdateThingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateThingRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateThingRequestRequired(updateThingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateThingRequestConstraints(updateThingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateThing(r.Context(), uuidParam, updateThingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
