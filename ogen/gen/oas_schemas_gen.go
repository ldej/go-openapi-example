// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type ApiKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKey) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/CreateThingRequest
type CreateThingRequest struct {
	Name   string     `json:"name"`
	Type   ThingType  `json:"type"`
	Rank   int64      `json:"rank"`
	Score  OptFloat64 `json:"score"`
	Rating OptFloat32 `json:"rating"`
}

// GetName returns the value of Name.
func (s *CreateThingRequest) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *CreateThingRequest) GetType() ThingType {
	return s.Type
}

// GetRank returns the value of Rank.
func (s *CreateThingRequest) GetRank() int64 {
	return s.Rank
}

// GetScore returns the value of Score.
func (s *CreateThingRequest) GetScore() OptFloat64 {
	return s.Score
}

// GetRating returns the value of Rating.
func (s *CreateThingRequest) GetRating() OptFloat32 {
	return s.Rating
}

// SetName sets the value of Name.
func (s *CreateThingRequest) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *CreateThingRequest) SetType(val ThingType) {
	s.Type = val
}

// SetRank sets the value of Rank.
func (s *CreateThingRequest) SetRank(val int64) {
	s.Rank = val
}

// SetScore sets the value of Score.
func (s *CreateThingRequest) SetScore(val OptFloat64) {
	s.Score = val
}

// SetRating sets the value of Rating.
func (s *CreateThingRequest) SetRating(val OptFloat32) {
	s.Rating = val
}

// DeleteThingNoContent is response for DeleteThing operation.
type DeleteThingNoContent struct{}

func (*DeleteThingNoContent) deleteThingRes() {}

type DeleteThingNotFound Error

func (*DeleteThingNotFound) deleteThingRes() {}

type DeleteThingUnauthorized Error

func (*DeleteThingUnauthorized) deleteThingRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) listThingsRes() {}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetThingNotFound Error

func (*GetThingNotFound) getThingRes() {}

type GetThingUnauthorized Error

func (*GetThingUnauthorized) getThingRes() {}

// Ref: #/components/schemas/ListThingsResponse
type ListThingsResponse struct {
	Things []ThingResponse `json:"things"`
	Total  int             `json:"total"`
}

// GetThings returns the value of Things.
func (s *ListThingsResponse) GetThings() []ThingResponse {
	return s.Things
}

// GetTotal returns the value of Total.
func (s *ListThingsResponse) GetTotal() int {
	return s.Total
}

// SetThings sets the value of Things.
func (s *ListThingsResponse) SetThings(val []ThingResponse) {
	s.Things = val
}

// SetTotal sets the value of Total.
func (s *ListThingsResponse) SetTotal(val int) {
	s.Total = val
}

func (*ListThingsResponse) listThingsRes() {}

// NewOptCreateThingRequest returns new OptCreateThingRequest with value set to v.
func NewOptCreateThingRequest(v CreateThingRequest) OptCreateThingRequest {
	return OptCreateThingRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateThingRequest is optional CreateThingRequest.
type OptCreateThingRequest struct {
	Value CreateThingRequest
	Set   bool
}

// IsSet returns true if OptCreateThingRequest was set.
func (o OptCreateThingRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateThingRequest) Reset() {
	var v CreateThingRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateThingRequest) SetTo(v CreateThingRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateThingRequest) Get() (v CreateThingRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateThingRequest) Or(d CreateThingRequest) CreateThingRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateThingRequest returns new OptUpdateThingRequest with value set to v.
func NewOptUpdateThingRequest(v UpdateThingRequest) OptUpdateThingRequest {
	return OptUpdateThingRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateThingRequest is optional UpdateThingRequest.
type OptUpdateThingRequest struct {
	Value UpdateThingRequest
	Set   bool
}

// IsSet returns true if OptUpdateThingRequest was set.
func (o OptUpdateThingRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateThingRequest) Reset() {
	var v UpdateThingRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateThingRequest) SetTo(v UpdateThingRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateThingRequest) Get() (v UpdateThingRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateThingRequest) Or(d UpdateThingRequest) UpdateThingRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ThingResponse
type ThingResponse struct {
	UUID    uuid.UUID `json:"uuid"`
	Type    ThingType `json:"type"`
	Name    string    `json:"name"`
	Rank    int64     `json:"rank"`
	Score   float64   `json:"score"`
	Rating  float32   `json:"rating"`
	Created time.Time `json:"created"`
}

// GetUUID returns the value of UUID.
func (s *ThingResponse) GetUUID() uuid.UUID {
	return s.UUID
}

// GetType returns the value of Type.
func (s *ThingResponse) GetType() ThingType {
	return s.Type
}

// GetName returns the value of Name.
func (s *ThingResponse) GetName() string {
	return s.Name
}

// GetRank returns the value of Rank.
func (s *ThingResponse) GetRank() int64 {
	return s.Rank
}

// GetScore returns the value of Score.
func (s *ThingResponse) GetScore() float64 {
	return s.Score
}

// GetRating returns the value of Rating.
func (s *ThingResponse) GetRating() float32 {
	return s.Rating
}

// GetCreated returns the value of Created.
func (s *ThingResponse) GetCreated() time.Time {
	return s.Created
}

// SetUUID sets the value of UUID.
func (s *ThingResponse) SetUUID(val uuid.UUID) {
	s.UUID = val
}

// SetType sets the value of Type.
func (s *ThingResponse) SetType(val ThingType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *ThingResponse) SetName(val string) {
	s.Name = val
}

// SetRank sets the value of Rank.
func (s *ThingResponse) SetRank(val int64) {
	s.Rank = val
}

// SetScore sets the value of Score.
func (s *ThingResponse) SetScore(val float64) {
	s.Score = val
}

// SetRating sets the value of Rating.
func (s *ThingResponse) SetRating(val float32) {
	s.Rating = val
}

// SetCreated sets the value of Created.
func (s *ThingResponse) SetCreated(val time.Time) {
	s.Created = val
}

func (*ThingResponse) getThingRes() {}

// Ref: #/components/schemas/ThingType
type ThingType string

const (
	ThingTypeSome ThingType = "some"
	ThingTypeAny  ThingType = "any"
	ThingTypeNone ThingType = "none"
)

// MarshalText implements encoding.TextMarshaler.
func (s ThingType) MarshalText() ([]byte, error) {
	switch s {
	case ThingTypeSome:
		return []byte(s), nil
	case ThingTypeAny:
		return []byte(s), nil
	case ThingTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThingType) UnmarshalText(data []byte) error {
	switch ThingType(data) {
	case ThingTypeSome:
		*s = ThingTypeSome
		return nil
	case ThingTypeAny:
		*s = ThingTypeAny
		return nil
	case ThingTypeNone:
		*s = ThingTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateThingNoContent is response for UpdateThing operation.
type UpdateThingNoContent struct{}

func (*UpdateThingNoContent) updateThingRes() {}

type UpdateThingNotFound Error

func (*UpdateThingNotFound) updateThingRes() {}

// Ref: #/components/schemas/UpdateThingRequest
type UpdateThingRequest struct {
	Score float64 `json:"score"`
}

// GetScore returns the value of Score.
func (s *UpdateThingRequest) GetScore() float64 {
	return s.Score
}

// SetScore sets the value of Score.
func (s *UpdateThingRequest) SetScore(val float64) {
	s.Score = val
}

type UpdateThingUnauthorized Error

func (*UpdateThingUnauthorized) updateThingRes() {}
