// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteThingParams is parameters of deleteThing operation.
type DeleteThingParams struct {
	// The uuid of the thing to get.
	UUID uuid.UUID
}

func unpackDeleteThingParams(packed middleware.Parameters) (params DeleteThingParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteThingParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteThingParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetThingParams is parameters of getThing operation.
type GetThingParams struct {
	// The uuid of the thing to get.
	UUID uuid.UUID
}

func unpackGetThingParams(packed middleware.Parameters) (params GetThingParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetThingParams(args [1]string, argsEscaped bool, r *http.Request) (params GetThingParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListThingsParams is parameters of listThings operation.
type ListThingsParams struct {
	// Page number.
	Page OptInt
	// Filter things by keyword.
	Keyword OptString
}

func unpackListThingsParams(packed middleware.Parameters) (params ListThingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "keyword",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Keyword = v.(OptString)
		}
	}
	return params
}

func decodeListThingsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListThingsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: keyword.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "keyword",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeywordVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeywordVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Keyword.SetTo(paramsDotKeywordVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "keyword",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateThingParams is parameters of updateThing operation.
type UpdateThingParams struct {
	// The uuid of the thing to get.
	UUID uuid.UUID
}

func unpackUpdateThingParams(packed middleware.Parameters) (params UpdateThingParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateThingParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateThingParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
