// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCreateThingRequest_EncodeDecode(t *testing.T) {
	var typ CreateThingRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateThingRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteThingNotFound_EncodeDecode(t *testing.T) {
	var typ DeleteThingNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteThingNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteThingUnauthorized_EncodeDecode(t *testing.T) {
	var typ DeleteThingUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteThingUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetThingNotFound_EncodeDecode(t *testing.T) {
	var typ GetThingNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetThingNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetThingUnauthorized_EncodeDecode(t *testing.T) {
	var typ GetThingUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetThingUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestListThingsResponse_EncodeDecode(t *testing.T) {
	var typ ListThingsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ListThingsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestThingResponse_EncodeDecode(t *testing.T) {
	var typ ThingResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ThingResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestThingType_EncodeDecode(t *testing.T) {
	var typ ThingType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ThingType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateThingNotFound_EncodeDecode(t *testing.T) {
	var typ UpdateThingNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateThingNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateThingRequest_EncodeDecode(t *testing.T) {
	var typ UpdateThingRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateThingRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateThingUnauthorized_EncodeDecode(t *testing.T) {
	var typ UpdateThingUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateThingUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
