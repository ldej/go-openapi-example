// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ThingType.
const (
	Any  ThingType = "any"
	None ThingType = "none"
	Some ThingType = "some"
)

// CreateThingRequest defines model for CreateThingRequest.
type CreateThingRequest struct {
	Name   string    `json:"name"`
	Rank   int64     `json:"rank"`
	Rating *float32  `json:"rating,omitempty"`
	Score  *float64  `json:"score,omitempty"`
	Type   ThingType `json:"type"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ListThingsResponse defines model for ListThingsResponse.
type ListThingsResponse struct {
	Things []ThingResponse `json:"things"`
	Total  int             `json:"total"`
}

// ThingResponse defines model for ThingResponse.
type ThingResponse struct {
	Created time.Time          `json:"created"`
	Name    string             `json:"name"`
	Rank    int64              `json:"rank"`
	Rating  float32            `json:"rating"`
	Score   float64            `json:"score"`
	Type    ThingType          `json:"type"`
	Uuid    openapi_types.UUID `json:"uuid"`
}

// ThingType defines model for ThingType.
type ThingType string

// UpdateThingRequest defines model for UpdateThingRequest.
type UpdateThingRequest struct {
	Score float64 `json:"score"`
}

// DefaultError defines model for DefaultError.
type DefaultError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ListThingsParams defines parameters for ListThings.
type ListThingsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Keyword Filter things by keyword
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// CreateThingJSONRequestBody defines body for CreateThing for application/json ContentType.
type CreateThingJSONRequestBody = CreateThingRequest

// UpdateThingJSONRequestBody defines body for UpdateThing for application/json ContentType.
type UpdateThingJSONRequestBody = UpdateThingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /things)
	ListThings(w http.ResponseWriter, r *http.Request, params ListThingsParams)

	// (POST /things)
	CreateThing(w http.ResponseWriter, r *http.Request)

	// (DELETE /things/{uuid})
	DeleteThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)

	// (GET /things/{uuid})
	GetThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)

	// (PUT /things/{uuid})
	UpdateThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListThings operation middleware
func (siw *ServerInterfaceWrapper) ListThings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListThingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", r.URL.Query(), &params.Keyword)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyword", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListThings(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateThing operation middleware
func (siw *ServerInterfaceWrapper) CreateThing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{"thing.create"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThing(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteThing operation middleware
func (siw *ServerInterfaceWrapper) DeleteThing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{"thing.delete"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThing(w, r, uuid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetThing operation middleware
func (siw *ServerInterfaceWrapper) GetThing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThing(w, r, uuid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateThing operation middleware
func (siw *ServerInterfaceWrapper) UpdateThing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyScopes, []string{"thing.update"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateThing(w, r, uuid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/things", wrapper.ListThings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/things", wrapper.CreateThing)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/things/{uuid}", wrapper.DeleteThing)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/things/{uuid}", wrapper.GetThing)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/things/{uuid}", wrapper.UpdateThing)
	})

	return r
}

type DefaultErrorJSONResponse Error

type NotFoundJSONResponse Error

type UnauthorizedJSONResponse Error

type ListThingsRequestObject struct {
	Params ListThingsParams
}

type ListThingsResponseObject interface {
	VisitListThingsResponse(w http.ResponseWriter) error
}

type ListThings200JSONResponse ListThingsResponse

func (response ListThings200JSONResponse) VisitListThingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListThings401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ListThings401JSONResponse) VisitListThingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListThingsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListThingsdefaultJSONResponse) VisitListThingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateThingRequestObject struct {
	Body *CreateThingJSONRequestBody
}

type CreateThingResponseObject interface {
	VisitCreateThingResponse(w http.ResponseWriter) error
}

type CreateThing200JSONResponse ThingResponse

func (response CreateThing200JSONResponse) VisitCreateThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateThingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateThingdefaultJSONResponse) VisitCreateThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteThingRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

type DeleteThingResponseObject interface {
	VisitDeleteThingResponse(w http.ResponseWriter) error
}

type DeleteThing204Response struct {
}

func (response DeleteThing204Response) VisitDeleteThingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteThing401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteThing401JSONResponse) VisitDeleteThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteThing404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteThing404JSONResponse) VisitDeleteThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteThingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteThingdefaultJSONResponse) VisitDeleteThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetThingRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

type GetThingResponseObject interface {
	VisitGetThingResponse(w http.ResponseWriter) error
}

type GetThing200JSONResponse ThingResponse

func (response GetThing200JSONResponse) VisitGetThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetThing401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetThing401JSONResponse) VisitGetThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetThing404JSONResponse struct{ NotFoundJSONResponse }

func (response GetThing404JSONResponse) VisitGetThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetThingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetThingdefaultJSONResponse) VisitGetThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateThingRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
	Body *UpdateThingJSONRequestBody
}

type UpdateThingResponseObject interface {
	VisitUpdateThingResponse(w http.ResponseWriter) error
}

type UpdateThing204Response struct {
}

func (response UpdateThing204Response) VisitUpdateThingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateThing401JSONResponse struct{ UnauthorizedJSONResponse }

func (response UpdateThing401JSONResponse) VisitUpdateThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateThing404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateThing404JSONResponse) VisitUpdateThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateThingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateThingdefaultJSONResponse) VisitUpdateThingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /things)
	ListThings(ctx context.Context, request ListThingsRequestObject) (ListThingsResponseObject, error)

	// (POST /things)
	CreateThing(ctx context.Context, request CreateThingRequestObject) (CreateThingResponseObject, error)

	// (DELETE /things/{uuid})
	DeleteThing(ctx context.Context, request DeleteThingRequestObject) (DeleteThingResponseObject, error)

	// (GET /things/{uuid})
	GetThing(ctx context.Context, request GetThingRequestObject) (GetThingResponseObject, error)

	// (PUT /things/{uuid})
	UpdateThing(ctx context.Context, request UpdateThingRequestObject) (UpdateThingResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListThings operation middleware
func (sh *strictHandler) ListThings(w http.ResponseWriter, r *http.Request, params ListThingsParams) {
	var request ListThingsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListThings(ctx, request.(ListThingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListThings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListThingsResponseObject); ok {
		if err := validResponse.VisitListThingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateThing operation middleware
func (sh *strictHandler) CreateThing(w http.ResponseWriter, r *http.Request) {
	var request CreateThingRequestObject

	var body CreateThingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateThing(ctx, request.(CreateThingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateThing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateThingResponseObject); ok {
		if err := validResponse.VisitCreateThingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteThing operation middleware
func (sh *strictHandler) DeleteThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request DeleteThingRequestObject

	request.Uuid = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteThing(ctx, request.(DeleteThingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteThing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteThingResponseObject); ok {
		if err := validResponse.VisitDeleteThingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetThing operation middleware
func (sh *strictHandler) GetThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request GetThingRequestObject

	request.Uuid = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetThing(ctx, request.(GetThingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetThing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetThingResponseObject); ok {
		if err := validResponse.VisitGetThingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UpdateThing operation middleware
func (sh *strictHandler) UpdateThing(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request UpdateThingRequestObject

	request.Uuid = uuid

	var body UpdateThingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateThing(ctx, request.(UpdateThingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateThing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateThingResponseObject); ok {
		if err := validResponse.VisitUpdateThingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX32/bNhD+Vzhuj4zlZNke9LSsTYusQVa0KTAgyAMjnS2mEsmQp3he4P99OFI/bEuO",
	"uyIJuj5ZEsm7433ffXd+4JmprNGg0fP0gTvw1mgP4eU1zGRd4qlzxtF7ZjSCRnqU1pYqk6iMTm690fTN",
	"ZwVUkp5+cjDjKf8x6Y0ncdUn0dpqtRI8B585ZckIT3mzIPiFwTem1vnzu7wsgHkLmZopyJkDb2qXAVtI",
	"z7RBNgtRrAT/pGWNhXHqH3iBqDa80XJzggy+ciARLgul5x/grgYfgrDOWHCoImxaVkC/lfz7HPQcC54e",
	"TgXHpQWeco9O6Tndykn9mfbNjKsk8pQrjb8e826n0ghzcHEr0qH1zbPSSOSCvKiqrnj6i+CV0vG5d6fr",
	"6iba8JlxsGEiN/VNCXxkb/zweP5CEi5pI+XIwV2tHMFzFRPQGGmued05MTe3kCE56Xi9mb7M5MH3IF8V",
	"eC/nY2tb/oOFfv+Y73PlMVzAf2gqbhgIhnV6UgiV/6J8dNa6JHLpnFyGd4OyXIu+w3cr/MZve2As/E1f",
	"wxQGluabYEuEA1TVGt59alvKPhNHX5KLgte12rx6+CD2kGZ9k2gpHK7fhttdUXQJ3onNZRM0aCrHK+5N",
	"sCf1kowbvc7KPtufbL5XXb48dVsXjAeHERMckNVO4fIjpTO6kVa9g2UgP2liATIH1yYm5X8dnFh1QDt6",
	"nscTQVCVnplWqGUWbgGVVGVgzMz8VuZwO9Flb+9c1g50BiwH9ocJOa4dbS8QrU+TpDmR8NEmEkuZnbw/",
	"YxEaL5gDmXvB6pBTL1ipPHomdc5yKAHBs1hoP3DBS5VBU0lNQCdWZgWwo8l0EMpisZjIsDwxbp40Z31y",
	"fvbq9OLj6QGdId4qLCHE18bGBb8H52PYh3GXsaClVTzlP0+mkyMuuJVYBAiSXoDmEHK4eXHSMNaJBXEk",
	"tMGzvFm7bJesdLICBOd5erVt5b2cA2soIyLYdzW4ZY+NJREVa111qF/bRt+oEsE1wbGbJfsMy4Vx+Q4P",
	"/erASVet12JzODqaTp9sFBjpBiNzwZ/vCLDj6eEuc118yeYIQYbCJLf/4MbIRyGgJAY0TYFfrwS3xo+Q",
	"IQ4mTMacD/iwNrfwKAvg8XeTL58shyOT0VgOg+iwoAtKKz2P8caqVUaznquT0FSeC/Ktbr0L7a8HrtXU",
	"UHKtmjY4TqJI8Wti9TbCK9FWfvJATWkVwSbJGsL+OnzfCXtcbmF/VAdIRskdMzOGBTS4oGGkPU3ZkjT1",
	"Vdt0zL7HoKthvYT3NeBhSR8Pb3hhWAv411bfcbT7+KHuX8/zod6AOIq6GNf4t4BMMq/0vIQdGL8F/P8A",
	"/OIF/K0TZkTf6xEexMlwZ52vDY7fKg2evuOMTMv/oePEuXBPv/m+9SimYEcXCofdfUuiOAIn0qrk/pCv",
	"ndjOz6nOrVEaPaP50MmM/jKxhcKin1UbYkVfq+vVvwEAAP//0B2dLAYTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
